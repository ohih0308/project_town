<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ohih.town.domain.post.mapper.PostMapper">
    <!--  Long getUserId(Long postId);  -->
    <select id="getUserId" parameterType="Long" resultType="Long">
        select user_id
        from posts
        where post_id = #{postId};
    </select>

    <!--  AccessInfo getAccessInfo(Long postId);  -->
    <select id="getAccessInfo" parameterType="Long" resultType="AccessInfo">
        select post_id   as postId,
               user_id   as userId,
               user_type as userType,
               password
        from posts
        where post_id = #{postId};
    </select>

    <!--  List<Attachment> getAttachments(Long postId);  -->
    <select id="getAttachments" parameterType="Long" resultType="Attachment">
        select *
        from attachments
        where post_id = #{postId};
    </select>

    <!--  Integer getCommentCount(Long postId);  -->
    <select id="getCommentCount" parameterType="Long" resultType="Integer">
        select count(*)
        from comments
        where post_id = #{postId};
    </select>

    <!--  Integer getAttachmentCount(Long postId);  -->
    <select id="getAttachmentCount" parameterType="Long" resultType="Integer">
        select count(*)
        from attachments
        where post_id = #{postId};
    </select>

    <!--  PostContent getPostContent(Long postId);  -->
    <select id="getPostContent" parameterType="Long" resultType="PostContent">
        select post_id   as postId,
               board_id  as boardId,
               user_id   as userId,
               user_type as userType,
               author,
               subject,
               body
        from posts
        where post_id = #{postId};
    </select>

    <!--  PostDetails getPostDetails(Long postId);  -->
    <select id="getPostDetails" parameterType="Long" resultType="PostDetails">
        select p.post_id          as postId,
               p.board_id         as boardId,
               p.user_type        as userType,
               p.user_id          as userId,
               p.ip,
               p.author,
               p.subject,
               p.body,
               p.views,
               p.created_at       as createAt,
               p.updated_at       as updatedAt,
               pi.saved_file_name as savedFileName,
               pi.extension,
               b.name             as boardName
        from posts as p
                 left join profile_images as pi on p.user_id = pi.user_id
                 left join boards as b on p.board_id = b.board_id
        where p.post_id = #{post_id};
    </select>

    <!--  Long countPosts(Map<String, Object> map);  -->
    <select id="countPosts" parameterType="Map" resultType="Long">
        select count(*)
        from posts as p
        left join boards as b on p.board_id = b.board_id
        where b.id = #{board_id}
        <if test="search.searchFilter == 'author'">
            and author like concat('%', #{search.searchValue}, '%')
        </if>
        <if test="search.searchFilter == 'subject'">
            and subject like concat('%', #{search.searchValue}, '%')
        </if>
        <if test="search.searchFilter == 'body'">
            and text like concat('%', #{search.searchValue}, '%')
        </if>;
    </select>

    <!--  List<SimplePost> getPosts(Map<String, Object> map);  -->
    <select id="getPosts" parameterType="Map" resultType="SimplePost">
        select p.post_id as postId,
        p.board_id as postId,
        p.user_id as userId,
        p.user_type as userType,
        p.author,
        p.subject,
        p.views,
        p.created_at,
        pi.saved_file_name as savedFileName,
        pi.extension
        from posts as p
        left join profile_images as pi on p.user_id = pi.user_id
        where p.board_id = #{board_id}
        <if test="search.searchFilter == 'author'">
            and author like concat('%', #{search.searchValue}, '%')
        </if>
        <if test="search.searchFilter == 'subject'">
            and subject like concat('%', #{search.searchValue}, '%')
        </if>
        <if test="search.searchFilter == 'body'">
            and text like concat('%', #{search.searchValue}, '%')
        </if>
        order by p.post_id desc
        limit #{paging.firstItemIndex}, #{paging.itemsPerPage};
    </select>

    <!--  Long countMyPosts(Map<String, Object> map);  -->
    <select id="countMyPosts" parameterType="Map" resultType="Long">
        select count(*)
        from posts as p
        left join users as u on p.user_id = u.user_id
        where u.user_id = #{user_id}
        <if test="search.searchFilter == 'author'">
            and author like concat('%', #{search.searchValue}, '%')
        </if>
        <if test="search.searchFilter == 'subject'">
            and subject like concat('%', #{search.searchValue}, '%')
        </if>
        <if test="search.searchFilter == 'body'">
            and text like concat('%', #{search.searchValue}, '%')
        </if>;
    </select>

    <!--  List<SimplePost> getMyPosts(Map<String, Object> map);  -->
    <select id="getMyPosts" parameterType="Map" resultType="SimplePost">
        select p.post_id as postId,
        p.board_id as postId,
        p.user_id as userId,
        p.user_type as userType,
        p.author,
        p.subject,
        p.views,
        p.created_at,
        pi.saved_file_name as savedFileName,
        pi.extension
        from posts as p
        left join users on p.user_id = pi.user_id
        where p.user_id = #{user_id}
        <if test="search.searchFilter == 'author'">
            and author like concat('%', #{search.searchValue}, '%')
        </if>
        <if test="search.searchFilter == 'subject'">
            and subject like concat('%', #{search.searchValue}, '%')
        </if>
        <if test="search.searchFilter == 'body'">
            and text like concat('%', #{search.searchValue}, '%')
        </if>
        order by p.post_id desc
        limit #{paging.firstItemIndex}, #{paging.itemsPerPage};
    </select>

    <!--  boolean getAppraisal(Map<String, Object> map);  -->
    <select id="getAppraisal" parameterType="Map" resultType="Integer">
        select count(*)
        from post_appraisals
        where post_id = #{postId}
          and #{field} = #{value};
    </select>

    <!--  Integer countAppraisals(Long postId);  -->
    <select id="countAppraisals" parameterType="Long" resultType="Integer">
        select count(*)
        from post_appraisals
        where post_id = #{postId};
    </select>


    <!--  boolean uploadAttachment(Attachment attachment);  -->
    <insert id="uploadAttachment" parameterType="Attachment">
        insert into attachments (file_name, extension, post_id, directory)
        values (#{fileName}, #{extension}, #{postId}, #{directory});
    </insert>

    <!--  boolean uploadThumbnail(Attachment attachment);  -->
    <insert id="uploadThumbnail" parameterType="Attachment">
        insert into thumbnails (post_id, file_name, directory)
        values (#{postId}, #{fileName}, #{directory});
    </insert>

    <!--  boolean uploadPost(PostUploadRequest guestbookUploadRequest);  -->
    <insert id="uploadPost" parameterType="PostUploadRequest" useGeneratedKeys="true" keyProperty="postId">
        insert into posts (board_id, user_type, ip, author, password, subject, body, views, created_at, updated_at)
        values (#{boardId}, #{userType}, #{ip}, #{author}, #{password}, #{subject}, #{body}, 0, now(), now());
    </insert>

    <!--  boolean uploadAppraisal(Appraisal appraisal);  -->
    <insert id="uploadAppraisal" parameterType="Appraisal">
        insert into post_appraisals (user_id, post_id, is_like, ip)
        values (#{userId}, #{postId}, #{isLike}, #{ip});
    </insert>

    <!--  boolean updateThumbnail(Attachment attachment);  -->
    <update id="updateThumbnail" parameterType="Attachment">
        update thumbnails
        set file_name = #{fileNmae},
            directory = #{directory}
        where post_id = #{postId};
    </update>

    <!--  boolean updatePost(PostUploadRequest guestbookUploadRequest);  -->
    <update id="updatePost" parameterType="PostUploadRequest">
        update posts
        set board_id   = #{boardId},
            user_id    = #{userId},
            user_type  = #{userType},
            ip         = #{ip},
            author     = #{author},
            password   = #{password},
            subject    = #{subject},
            body       = #{body},
            updated_at = NOW()
    </update>

    <!--  boolean updateAppraisal(Appraisal appraisal);  -->
    <update id="updateAppraisal" parameterType="Appraisal">
        update post_appraisal
        set is_like = #{isLike}
        where post_id = #{postId}
        and
        <if test="userId == null">
            ip = #{ip};
        </if>
        <if test="userId != null">
            user_id = #{userId};
        </if>
    </update>


    <!--  Integer deleteAttachments(Long postId);  -->
    <delete id="deleteAttachments" parameterType="Long">
        delete
        from attachments
        where post_id = #{postId};
    </delete>

    <!--  boolean deleteThumbnail(Long postId);  -->
    <delete id="deleteThumbnail" parameterType="Long">
        delete
        from thumbnails
        where post_id = #{postId};
    </delete>

    <!--  boolean deletePost(Long postId);  -->
    <delete id="deletePost" parameterType="Long">
        delete
        from posts
        where post_id = #{postId};
    </delete>

    <!--  Integer deleteAppraisals(Long postId);  -->
    <delete id="deleteAppraisals" parameterType="Long">
        delete
        from post_appraisals
        where post_id = #{postId};
    </delete>


    <!--  boolean updateViewsCount(Long postId);  -->
    <update id="updateViewsCount" parameterType="Long">
        update posts
        set views = views + 1
        where postId = #{postId};
    </update>
</mapper>